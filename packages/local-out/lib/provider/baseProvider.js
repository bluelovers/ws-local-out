"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_spawn_extra_1 = require("cross-spawn-extra");
const bluebird_1 = __importDefault(require("bluebird"));
const AbstractProvider_1 = require("../AbstractProvider");
class BaseProvider extends AbstractProvider_1.AbstractProvider {
    _constructor() {
        super._constructor();
        this._cache = {
            SERVICES: ["ssh.localhost.run", "serveo.net"],
            SERVICES_CONTAINS: ["Connect to", "Forwarding HTTP traffic from"],
            ID_SERVICES: 0,
        };
    }
    connect() {
        const { context } = this;
        if (context.port == null) {
            throw new TypeError("port is undefined");
        }
        let ID_SERVICES = this._cache.ID_SERVICES;
        let fn = (e) => {
            context.debug && context._debugConsole.debug(`[connect]`, e.message.replace(/\s+$/g, ''));
            if (this._provider(++ID_SERVICES)) {
                return this._exec(ID_SERVICES)
                    // @ts-ignore
                    .then(fn);
            }
            else if (e.message.includes('timeout')) {
                e = new Error("All of the services to forwards PORT is off.");
            }
            return bluebird_1.default.reject(e);
        };
        return this._exec(ID_SERVICES)
            .catch(fn);
    }
    _provider(ID_SERVICES) {
        return this._cache.SERVICES[ID_SERVICES];
    }
    _ssh_args(ID_SERVICES) {
        let provider = this._provider(ID_SERVICES);
        const args = [
            '-o',
            'StrictHostKeyChecking=no',
            '-o',
            'UserKnownHostsFile=/dev/null',
            '-R',
            `${this.context.portOnline}:${this.context.hostname}:${this.context.port}`,
            provider,
        ];
        return args;
    }
    _exec(ID_SERVICES) {
        const context = this.context;
        let args = this._ssh_args(ID_SERVICES);
        context.debug && context._debugConsole.debug(`[spawn]`, 'ssh', args);
        const ret = cross_spawn_extra_1.async('ssh', args);
        const { child } = ret;
        this.child = child;
        let urlFinded;
        return new bluebird_1.default(((resolve, reject) => {
            child.stderrStream.on('data', (buf) => {
                //this.context.emit(EnumLocalOutEvent.Connect, buf);
                context.debug && context._debugConsole.debug(`[stderr]`, buf.toString().replace(/\s+$/g, ''));
            });
            child
                .stdoutStream
                .on('data', (buf) => {
                context.debug && context._debugConsole.debug(`[stdout]`, buf.toString().replace(/\s+$/g, ''));
                if (urlFinded) {
                    return;
                }
                const data = Buffer.from(buf).toString();
                let SERVICES_CONTAINS = this._cache.SERVICES_CONTAINS[ID_SERVICES];
                if (data.includes(SERVICES_CONTAINS)) {
                    let urlGet = data.split(SERVICES_CONTAINS)[1];
                    let url = replaceAll(urlGet, "\n", "")
                        .trim()
                        .replace(/\s.+$/, '');
                    urlFinded = true;
                    let { hostname, port } = new URL(url);
                    resolve({
                        hostname, port,
                    });
                }
                else {
                    reject(new Error("Can't forward http traffic."));
                }
            });
            setTimeout(r => {
                if (!urlFinded) {
                    reject(new Error("timeout 5s"));
                }
            }, 5000);
        }))
            .tapCatch(e => {
            try {
                child.kill();
            }
            catch (e) {
            }
        });
    }
}
exports.BaseProvider = BaseProvider;
BaseProvider.desc = `localhost.run and serveo provider`;
function replaceAll(str, replaceWhat, replaceTo) {
    replaceWhat = replaceWhat.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    let re = new RegExp(replaceWhat, 'g');
    return str
        .replace(re, replaceTo);
}
exports.default = BaseProvider;
//# sourceMappingURL=data:application/json;base64,